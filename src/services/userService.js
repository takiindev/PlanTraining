import { doc, setDoc, getDoc, collection, getDocs } from "firebase/firestore";
import { db } from "../firebase";

/**
 * L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o collection users
 * @param {string} userId - ID document t·ª´ collection accounts
 * @param {Object} userInfo - Th√¥ng tin ng∆∞·ªùi d√πng
 * @param {string} userInfo.firstName - T√™n
 * @param {string} userInfo.lastName - H·ªç v√† t√™n ƒë·ªám
 * @param {string} userInfo.email - Email
 * @param {string} userInfo.role - Vai tr√≤ ng∆∞·ªùi d√πng (m·∫∑c ƒë·ªãnh: "user")
 * @returns {Promise<void>}
 */
export async function saveUserInfo(userId, userInfo) {
  try {
    // S·ª≠ d·ª•ng setDoc v·ªõi ID c·ª• th·ªÉ thay v√¨ addDoc
    await setDoc(doc(db, "users", userId), {
      firstName: userInfo.firstName,
      lastName: userInfo.lastName,
      email: userInfo.email,
      role: userInfo.role || "user", // M·∫∑c ƒë·ªãnh l√† "user"
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log("Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi ID:", userId);
  } catch (error) {
    console.error("L·ªói khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
}

/**
 * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ collection users
 * @param {string} userId - ID document
 * @returns {Promise<Object|null>} Th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export async function getUserInfo(userId) {
  try {
    const userDoc = await getDoc(doc(db, "users", userId));
    
    if (userDoc.exists()) {
      return {
        uid: userDoc.id, // Document ID ch√≠nh l√† Firebase Auth UID
        id: userDoc.id,  // Gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch
        ...userDoc.data()
      };
    } else {
      return null;
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
 * @param {string} userId - ID document
 * @param {Object} updateData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Promise<void>}
 */
export async function updateUserInfo(userId, updateData) {
  try {
    await setDoc(doc(db, "users", userId), {
      ...updateData,
      updatedAt: new Date()
    }, { merge: true });
    
    console.log("Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", userId);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
}

/**
 * C·∫≠p nh·∫≠t role c·ªßa ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
 * @param {string} userId - ID c·ªßa user c·∫ßn thay ƒë·ªïi role
 * @param {string} newRole - Role m·ªõi ("user", "member", "admin")
 * @returns {Promise<void>}
 */
export async function updateUserRole(userId, newRole) {
  try {
    // Validate role
    const validRoles = ["user", "member", "admin"];
    if (!validRoles.includes(newRole)) {
      throw new Error("Role kh√¥ng h·ª£p l·ªá. Ch·ªâ cho ph√©p: user, member, admin");
    }

    await setDoc(doc(db, "users", userId), {
      role: newRole,
      updatedAt: new Date()
    }, { merge: true });
    
    console.log(`Role c·ªßa user ${userId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: ${newRole}`);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t role:", error);
    throw error;
  }
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 */
export async function getAllUsers() {
  try {
    console.log("üîç B·∫Øt ƒë·∫ßu getAllUsers...");
    const usersCollection = collection(db, "users");
    console.log("üìÅ Users collection reference:", usersCollection);
    
    const snapshot = await getDocs(usersCollection);
    console.log("üìä Snapshot received, size:", snapshot.size);
    console.log("üìä Snapshot empty:", snapshot.empty);
    
    const users = [];
    snapshot.forEach((doc) => {
      const userData = {
        uid: doc.id, // Document ID ch√≠nh l√† Firebase Auth UID
        id: doc.id,  // Gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch
        ...doc.data()
      };
      console.log("üë§ User found:", doc.id, userData);
      users.push(userData);
    });
    
    console.log("üìã Total users before sorting:", users.length);
    
    // S·∫Øp x·∫øp theo role (owner > admin > member > user) r·ªìi theo t√™n
    users.sort((a, b) => {
      const roleOrder = { owner: 4, admin: 3, member: 2, user: 1 };
      const roleCompare = (roleOrder[b.role] || 0) - (roleOrder[a.role] || 0);
      if (roleCompare !== 0) return roleCompare;
      
      const nameA = `${a.firstName} ${a.lastName}`.toLowerCase();
      const nameB = `${b.firstName} ${b.lastName}`.toLowerCase();
      return nameA.localeCompare(nameB);
    });
    
    console.log("‚úÖ Final users array:", users);
    return users;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch users:", error);
    throw error;
  }
}
