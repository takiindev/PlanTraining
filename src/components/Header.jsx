import { useState, useEffect } from "react";
import { logout, getCurrentUserEmail, getUserByEmail } from "../services/tokenService";
import { getUserInfo, subscribeToUserInfo } from "../services/userService";
import { getUserRelatedClasses, subscribeToUserRelatedClasses } from "../services/classService";
import { useNotification } from "../contexts/NotificationContext";
import { realtimeManager } from "../services/realtimeManager";
import { appConfig } from "../utils/envUtils";
import { useNavigate, useLocation } from "react-router-dom";
import viteLogo from "/vite.svg";
import "./Header.css";

function Header() {
  const [user, setUser] = useState(null);
  const [userInfo, setUserInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showDropdown, setShowDropdown] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [forceUpdate, setForceUpdate] = useState(0);
  const { refreshTrigger } = useNotification();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    if (userInfo) {
      setForceUpdate(prev => prev + 1);
    }
  }, [userInfo]);

  // Function ƒë·ªÉ l·∫•y title theo pathname
  const getPageTitle = (pathname) => {
    switch (pathname) {
      case '/dashboard':
        return 'Dashboard';
      case '/role-management':
        return 'Qu·∫£n l√Ω Vai tr√≤';
      case '/profile':
        return 'H·ªì s∆° c√° nh√¢n';
      case '/login':
        return 'ƒêƒÉng nh·∫≠p';
      case '/register':
        return 'ƒêƒÉng k√Ω';
      default:
        return appConfig.name;
    }
  };

  useEffect(() => {
    const loadUserInfo = async () => {
      try {
        const userEmail = getCurrentUserEmail();
        if (userEmail) {
          // L·∫•y th√¥ng tin t√†i kho·∫£n
          const accountData = await getUserByEmail(userEmail);
          if (accountData) {
            setUser({ email: userEmail, id: accountData.id });
            
            // L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
            const detailInfo = await getUserInfo(accountData.id);
            setUserInfo(detailInfo);
            
            // Setup real-time listeners cho user info v√† notifications
            setupRealTimeListeners(accountData.id);
          }
        }
      } catch (error) {
        console.error("L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng:", error);
      } finally {
        setLoading(false);
      }
    };

    loadUserInfo();
  }, []);

  // Setup all real-time listeners using realtimeManager
  const setupRealTimeListeners = (userId) => {
    // Subscribe to user info changes
    realtimeManager.subscribeUserInfo(userId, (updatedUserInfo) => {
      if (updatedUserInfo) {
        setUserInfo(updatedUserInfo);
        
        // Force re-render n·∫øu c√≥ avatar m·ªõi
        if (updatedUserInfo.avatarUrl && updatedUserInfo.avatarUrl !== userInfo?.avatarUrl) {
          // Trigger component re-render
          setUserInfo({...updatedUserInfo});
        }
      }
    }, `header-userInfo-${userId}`);

    // Subscribe to user related classes for notifications
    realtimeManager.subscribeUserClasses(userId, (userClasses) => {
      
      // L·ªçc c√°c bu·ªïi d·∫°y t·ª´ h√¥m nay ƒë·∫øn 7 ng√†y t·ªõi
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
      
      const upcomingClasses = userClasses.filter(cls => {
        const classDate = cls.date.toDate ? cls.date.toDate() : new Date(cls.date);
        classDate.setHours(0, 0, 0, 0);
        return classDate >= today && classDate <= nextWeek;
      });
      
      setNotifications(upcomingClasses);
    }, `header-userClasses-${userId}`);
  };

  // Cleanup all listeners khi component unmount
  useEffect(() => {
    return () => {
      // Clean up header-specific listeners
      if (user?.id) {
        realtimeManager.unsubscribe(`header-userInfo-${user.id}`);
        realtimeManager.unsubscribe(`header-userClasses-${user.id}`);
      }
    };
  }, [user?.id]);  // Cleanup listener khi component unmount
  
  // Listen for storage changes ƒë·ªÉ update khi avatar thay ƒë·ªïi
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'cachedUserInfo') {
        try {
          const newUserInfo = JSON.parse(e.newValue);
          if (newUserInfo && newUserInfo.avatarUrl !== userInfo?.avatarUrl) {
            setUserInfo(newUserInfo);
          }
        } catch (error) {
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [userInfo?.avatarUrl]);
  
  useEffect(() => {
    return () => {
      if (window.notificationsUnsubscribe) {
        window.notificationsUnsubscribe();
      }
    };
  }, []);

  // Th√™m effect ƒë·ªÉ refresh th√¥ng b√°o m·ªói 5 ph√∫t
  useEffect(() => {
    if (user?.id) {
      const interval = setInterval(() => {
        loadNotifications(user.id);
      }, 5 * 60 * 1000); // 5 ph√∫t

      return () => clearInterval(interval);
    }
  }, [user?.id]);

  // Effect ƒë·ªÉ refresh th√¥ng b√°o khi c√≥ trigger t·ª´ context
  useEffect(() => {
    if (user?.id && refreshTrigger > 0) {
      loadNotifications(user.id);
    }
  }, [refreshTrigger, user?.id]);

  // Th√™m effect ƒë·ªÉ refresh th√¥ng b√°o m·ªói 5 ph√∫t (backup cho tr∆∞·ªùng h·ª£p listener b·ªã l·ªói)
  useEffect(() => {
    if (user?.id) {
      const interval = setInterval(() => {
        // Ch·ªâ l√†m backup, real-time listener s·∫Ω x·ª≠ l√Ω ch√≠nh
      }, 5 * 60 * 1000); // 5 ph√∫t

      return () => clearInterval(interval);
    }
  }, [user?.id]);

  const handleNotificationClick = (classItem) => {
    // ƒê√≥ng dropdown th√¥ng b√°o
    setShowNotifications(false);
    
    // Chuy·ªÉn ƒë·∫øn dashboard v√† set ng√†y ƒë∆∞·ª£c ch·ªçn
    const classDate = classItem.date.toDate ? classItem.date.toDate() : new Date(classItem.date);
    
    // S·ª≠ d·ª•ng localStorage ƒë·ªÉ truy·ªÅn th√¥ng tin ng√†y ƒë∆∞·ª£c ch·ªçn
    localStorage.setItem('selectedDate', classDate.toISOString());
    
    if (location.pathname !== '/dashboard') {
      navigate('/dashboard');
    } else {
      // N·∫øu ƒë√£ ·ªü dashboard, reload trang ƒë·ªÉ trigger effect
      window.location.reload();
    }
  };

  const getRoleText = (userRole) => {
    switch (userRole) {
      case 'mentor': return 'Mentor ch√≠nh';
      case 'support': return 'Mentor h·ªó tr·ª£';
      case 'manager': return 'Ng∆∞·ªùi x·∫øp l·ªãch';
      default: return '';
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate("/login");
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng xu·∫•t:", error);
      navigate("/login");
    }
  };

  if (loading) {
    return (
      <header className="header-loading">
        <div className="header-loading-text">ƒêang t·∫£i...</div>
      </header>
    );
  }

  return (
    <header className="header">
      {/* Logo/Brand */}
      <div className="header-brand">
        <img 
          src={viteLogo} 
          alt="Logo" 
          className="header-logo"
        />
        <div className="header-title-container">
          <span className="header-title-main">
            {appConfig.name}
          </span>
          <span className="header-title-page">
            {getPageTitle(location.pathname)}
          </span>
        </div>
      </div>

      {/* User Info */}
      <div className="header-user-container">
        {/* Notification Bell */}
        <div className="header-notifications">
          <div
            onClick={() => setShowNotifications(!showNotifications)}
            className={`notification-bell ${showNotifications ? 'active' : ''}`}
          >
            <svg 
              width="20" 
              height="20" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/>
              <path d="M13.73 21a2 2 0 0 1-3.46 0"/>
            </svg>
            {notifications.length > 0 && (
              <span className="notification-badge">{notifications.length}</span>
            )}
          </div>

          {/* Notifications Dropdown */}
          {showNotifications && (
            <div className="notifications-dropdown">
              <div className="notifications-header">
                <h4>Bu·ªïi d·∫°y s·∫Øp t·ªõi</h4>
                <span className="notifications-count">
                  {notifications.length} th√¥ng b√°o
                </span>
              </div>
              
              <div className="notifications-list">
                {notifications.length === 0 ? (
                  <div className="no-notifications">
                    <span>üìÖ</span>
                    <p>Kh√¥ng c√≥ bu·ªïi d·∫°y n√†o trong tu·∫ßn t·ªõi</p>
                  </div>
                ) : (
                  notifications.map((notification) => {
                    const classDate = notification.date.toDate ? notification.date.toDate() : new Date(notification.date);
                    return (
                      <div
                        key={notification.id}
                        className="notification-item"
                        onClick={() => handleNotificationClick(notification)}
                      >
                        <div className="notification-content">
                          <div className="notification-title">
                            {notification.topic}
                          </div>
                          <div className="notification-details">
                            <span className="notification-date">
                              üìÖ {classDate.toLocaleDateString('vi-VN')}
                            </span>
                            <span className="notification-time">
                              ‚è∞ {notification.startTime} - {notification.endTime}
                            </span>
                          </div>
                          <div className="notification-role">
                            {getRoleText(notification.userRole)}
                          </div>
                        </div>
                        <div className="notification-arrow">‚Üí</div>
                      </div>
                    );
                  })
                )}
              </div>
            </div>
          )}
        </div>

        <div
          onClick={() => setShowDropdown(!showDropdown)}
          className={`header-user-info ${showDropdown ? 'active' : ''}`}
        >
          {/* Avatar */}
          <div className="header-avatar">
            {userInfo?.avatarUrl ? (
              <img 
                src={userInfo.avatarUrl} 
                alt="Avatar" 
                className="header-avatar-image"
                key={userInfo.avatarUrl} // Force re-render when URL changes
                onLoad={() => {
                }}
                onError={(e) => {
                  // Fallback v·ªÅ text initials n·∫øu ·∫£nh load l·ªói
                  e.target.style.display = 'none';
                  e.target.nextSibling.style.display = 'flex';
                }}
              />
            ) : null}
            <div 
              className="header-avatar-text"
              style={{ 
                display: userInfo?.avatarUrl ? 'none' : 'flex' 
              }}
            >
              {userInfo ? 
                `${userInfo.lastName.charAt(0)}${userInfo.firstName.charAt(0)}` : 
                user?.email?.charAt(0)?.toUpperCase() || "U"
              }
            </div>
          </div>

          {/* User Info */}
          <div className="header-user-details">
            <div className="header-user-name">
              {userInfo ? `${userInfo.lastName} ${userInfo.firstName}` : user?.email}
            </div>
          </div>

          {/* Dropdown Arrow */}
          <div className={`header-dropdown-arrow ${showDropdown ? 'rotated' : ''}`}>
            ‚ñº
          </div>
        </div>

        {/* Dropdown Menu */}
        {showDropdown && (
          <div className="header-dropdown">
            {/* User Info Section */}
            <div className="header-dropdown-user-info">
              <div className="header-dropdown-user-name">
                {userInfo ? `${userInfo.lastName} ${userInfo.firstName}` : "Ng∆∞·ªùi d√πng"}
              </div>
              <div className="header-dropdown-user-email">
                {user?.email}
              </div>
            </div>

            {/* Menu Items */}
            <div className="header-dropdown-menu">
              <button
                onClick={() => {
                  setShowDropdown(false);
                  navigate("/dashboard");
                }}
                className="header-dropdown-item"
              >
                üè† Dashboard
              </button>
              
              {/* Ch·ªâ hi·ªÉn th·ªã "Qu·∫£n l√Ω Vai tr√≤" khi user c√≥ role owner ho·∫∑c admin */}
              {(() => {
                return userInfo?.role === 'owner' || userInfo?.role === 'admin';
              })() && (
                <button
                  onClick={() => {
                    setShowDropdown(false);
                    navigate("/role-management");
                  }}
                  className="header-dropdown-item"
                >
                  üë• Qu·∫£n l√Ω Vai tr√≤
                </button>
              )}
              
              <button
                onClick={() => {
                  setShowDropdown(false);
                  navigate("/profile");
                }}
                className="header-dropdown-item"
              >
                üë§ H·ªì s∆° c√° nh√¢n
              </button>

              <hr className="header-dropdown-divider" />

              <button
                onClick={() => {
                  setShowDropdown(false);
                  handleLogout();
                }}
                className="header-dropdown-item logout"
              >
                üö™ ƒêƒÉng xu·∫•t
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Click outside to close dropdown */}
      {(showDropdown || showNotifications) && (
        <div
          onClick={() => {
            setShowDropdown(false);
            setShowNotifications(false);
          }}
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 999
          }}
        />
      )}
    </header>
  );
}

export default Header;
